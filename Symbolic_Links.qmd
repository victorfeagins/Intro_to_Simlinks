---
title: "Symbolic Links"
editor: source
author: Victor Feagins
format: 
  html:
    toc: true
---

## Summary

This article introduces symbolic links and how they can help in handling files particularly data files in conjunction with a coding environment.

## Introduction

Files and directories on your computer are located in a certain location or path that generally looks like this `somedirectory/file.csv`and form a hierarchical tree:
```{mermaid}
%%| label: fig-Fig1
%%| fig-cap: |
%%|   Simple file tree structure
flowchart TB
  dir --> dirA
  dirA --> dirA1
  dirA1 --> mydata.csv
  dir --> dirB
  dirB --> mycode
```

Utilizing @fig-Fig1 In a coding context when working with mydata.csv we might reference the data file in the following manner:
```{r}
#| eval: false
my_data <- read.csv("dir/dirA/dirA1/mydata.csv")

```

Where `"dir/dirA/dirA1/mydata.csv"` is the file path to that particular csv file. The small issue with writing code in this fashion is that sometimes file paths can be very long and not robust for other users to utilize the code.

## Intro Symbolic Links

One solution to reducing long and overly complicated file path is to create symbolic links. Symbolic links act as short cuts to the location of another file.

```{mermaid}
%%| label: fig-Fig2
%%| fig-cap: |
%%|   Using symbolic links to create shorter path to mydata.csv
flowchart TB
  dir --> dirA
  dirA --> dirA1
  dirA1 --> mydata.csv
  dir --> dirB
  dirB --> ghost(mydata.csv)
  style ghost stroke-dasharray: 5 5
  dirB --> mycode
  ghost --- |symbolic link| mydata.csv
```

Looking at @fig-Fig2 we can see that mydata.csv file located at `"dir/dirA/dirA1/mydata.csv"` can also be access the same file with the path `"dir/dirB/mydata.csv"`


