---
title: "Symbolic Links"
editor: source
author: Victor Feagins
date: 9/7/2022
format: 
  html:
    toc: true
---

## Summary

This article introduces symbolic links what they are and how to make them. Symbolic links is a useful tool to add to your tool belt to bridge different locations on a computer together.

## Introduction

Files and directories on your computer are located in a certain location or path that generally looks like this `somedirectory/file.csv`and form a hierarchical tree:
```{mermaid}
%%| label: fig-File
%%| fig-cap: |
%%|   Simple file tree structure
flowchart TB
  dir --> dirA
  dirA --> dirA1
  dirA1 --> mydata.csv
  dir --> dirB
  dirB --> mycode
```

Utilizing @fig-File In a coding context when working with mydata.csv we might reference the data file in the following manner:
```{r}
#| eval: false
my_data <- read.csv("dir/dirA/dirA1/mydata.csv")

```

Where `"dir/dirA/dirA1/mydata.csv"` is the file path to that particular csv file. The small issue with writing code in this fashion is that sometimes file paths can be very long and not robust for other users to utilize the code.

## Intro Symbolic Links

One solution to reducing long and overly complicated file path is to create symbolic links. Symbolic links act as short cuts to the location of another file.

```{mermaid}
%%| label: fig-FileLink
%%| fig-cap: |
%%|   Using symbolic links to create shorter path to mydata.csv
flowchart TB
  dir --> dirA
  dirA --> dirA1
  dirA1 --> mydata.csv
  dir --> dirB
  dirB --> ghost(mydata.csv)
  style ghost stroke-dasharray: 5 5
  dirB --> mycode
  ghost --- |symbolic link| mydata.csv
```

Looking at @fig-FileLink we can see that mydata.csv file located at `"dir/dirA/dirA1/mydata.csv"` can also be access the same file with the path `"dir/dirB/mydata.csv"`
```{r}
#| eval: false
mydata <- read.csv("dir/dirB/mydata.csv")
```


### Linking Directories
In the previous example we saw creating a symbolic link with a single file the same process can be done with linking a directory.
Consider the following diagram
```{mermaid}
%%| label: fig-Dir
%%| fig-cap: |
%%|   file structure with multiple data files 
flowchart TB
  dir --> dirA
  dirA --> data1.csv
  dirA --> data2.csv
  dir --> dirB
  dirB --> mycode

```

We can see dirA has multiple data files in it we can produce a link with dirA.

```{mermaid}
%%| label: fig-DirLink
%%| fig-cap: |
%%|   Symbolic Link to directory combined with rename 
flowchart TB
  dir --> dirA
  dirA --> data1.csv & data2.csv
  
  dir --> dirB
  dirB --> RawData(RawData)
  style RawData stroke-dasharray: 5 5
  RawData --- |symbolic link| dirA
  RawData --> ghost1(data1.csv)
  style ghost1 stroke-dasharray: 5 5
  RawData --> ghost2(data2.csv)
  style ghost2 stroke-dasharray: 5 5
  dirB --> mycode
```

In @fig-DirLink we see that the RawData directory is linked with dirA and hence shares the children files.

## How to do a symbolic link

Doing a symbolic link will depend on your operating system:

::: {.panel-tabset}
## Windows
Using `mklink` command in command terminal with administrator privileges
```{r}
#| eval: false
mklink [/D] [destination] [source]
```
* `\D` option to link a directory. By default links a file
* Destination: location of where the link will be
* Source: location where the file or directory being linked is


### File Example
This command would produce the results seen in @fig-FileLink
```{r}
#| eval: false
mklink "dir\dirB\mydata.csv" "dir\dirA\dirA1\mydata.csv"
```

### Directory Example
This command would produce the results seen in @fig-DirLink note using the /D option to mean linking a directory
```{r}
#| eval: false
mklink /D "dir\dirB\RawData" "dir\dirA"
```

Typing in `mklink` in the windows command prompt will give you the documentation of the command

## Unix/Mac
Using `ln` command in the command terminal
```{r}
#| eval: false
ln [-s] [source] [destination]
```

* `-s` option will create a symbolic link
* Source: path of file or directory being linked
* Destination: location of where the link will be


### File Example
This command would produce the results seen in @fig-FileLink
```{r}
#| eval: false
ln -s dir/dirA/dirA1/mydata.csv dir/dirB/mydata.csv
```

### Directory Example
This command would produce the results seen in @fig-DirLink
```{r}
#| eval: false
ln -s dir/dirA dir/dirB/RawData 
```

To see documentation of `ln` type `ln --help` in the command prompt
:::

## One Use Case
### Moving data without moving data
If you have a lot of data files or the data is shared with different projects you may not want to copy or move the data to where your project is located.

```{mermaid}
%%| label: fig-MovingFiles
%%| fig-cap: |
%%|   Symbolic link to data directory
flowchart TB
  subgraph Datadir
  datafiles
  end
  Datadir --- |symbolic link| ghost1 & ghost2
  subgraph p1[project 1]
  code1[code]
  ghost1(Datadir)
  style ghost1 stroke-dasharray: 5 5
  end
  subgraph p2[project 2]
  code2[code]
  ghost2(Datadir)
  style ghost2 stroke-dasharray: 5 5
  end
```

This can be handy to not duplicate data or if for some reason there is a limitation in where your project can be and where your data can be stored which can happen in a shared computing space.

## Wrap Up
In this article we introduced symbolic links and how they can be used to link to other directories and files. They can be used to simplify file paths as well as to essentially move directories and files without actually moving them.







